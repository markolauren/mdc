
resourcecontainers
| where type == "microsoft.resources/subscriptions"
| project subscriptionId, subscriptionName = name
| join kind=inner (
    securityresources
    | where type =~ "microsoft.security/pricings"
    | extend pricingTier = iff(properties.pricingTier == "Free", "OFF", "on"), subPlan = properties.subPlan
    | extend planSet = pack(name, level = case(isnotempty(subPlan), subPlan, pricingTier))
    | summarize defenderPlans = make_bag(planSet) by subscriptionId
    | join kind=leftouter (
        resources
        | summarize 
            cloudPostureBillableCount = countif(type == "microsoft.compute/virtualmachines")
                                      + countif(type == "microsoft.compute/virtualmachinescalesets/virtualmachines")
                                      + countif(type == "microsoft.classiccompute/virtualmachines")
                                      + countif(type == "microsoft.storage/storageaccounts")
                                      + countif(type == "microsoft.sql/servers")
                                      + countif(type == "microsoft.sql/managedinstances")
                                      + countif(type == "microsoft.dbforpostgresql/flexibleservers")
                                      + countif(type == "microsoft.dbforpostgresql/servers")
                                      + countif(type == "microsoft.dbformysql/flexibleservers")
                                      + countif(type == "microsoft.dbformysql/servers")
                                      + countif(type == "microsoft.dbformariadb/servers")
                                      + countif(type == "microsoft.synapse/workspaces"),
            vmCount = countif(type == "microsoft.compute/virtualmachines") 
                    + countif(type == "microsoft.hybridcompute/machines")                             
                    + countif(type == "microsoft.compute/virtualmachinescalesets/virtualmachines")
                    + countif(type == "microsoft.classiccompute/virtualmachines"),
            appServiceCount = countif(type == "microsoft.web/sites" and kind has "app"),
            sqlServerCount = countif(type == "microsoft.sql/servers")
                           + countif(type == "microsoft.sql/managedinstances"),
            sqlVMCount = countif(type == "microsoft.sqlvirtualmachine/sqlvirtualmachines") 
                       + countif(type == "microsoft.azurearcdata/sqlserverinstances"),
            openSourceDBCount = countif(type == "microsoft.dbforpostgresql/servers")
                              + countif(type == "microsoft.dbforpostgresql/flexibleservers")
                              + countif(type == "microsoft.dbformysql/servers")
                              + countif(type == "microsoft.dbformysql/flexibleservers")
                              + countif(type == "microsoft.dbformariadb/servers"),
            cosmosCount = countif(type == "microsoft.documentdb/databaseaccounts"),
            storageCount = countif(type == "microsoft.storage/storageaccounts"),
            aksCount = countif(type == "microsoft.containerservice/managedclusters"),
            acrCount = countif(type == "microsoft.containerregistry/registries"),
            keyVaultCount = countif(type == "microsoft.keyvault/vaults"),
            armCount = 1
        by subscriptionId
    ) on subscriptionId
) on subscriptionId
| extend
    assetsDefended = 
        iif(defenderPlans.CloudPosture != "OFF", cloudPostureBillableCount, 0) +
        iif(defenderPlans.VirtualMachines != "OFF", vmCount, 0) +
        iif(defenderPlans.AppServices != "OFF", appServiceCount, 0) +
        iif(defenderPlans.SqlServers != "OFF", sqlServerCount, 0) +
        iif(defenderPlans.SqlServerVirtualMachines != "OFF", sqlVMCount, 0) +
        iif(defenderPlans.OpenSourceRelationalDatabases != "OFF", openSourceDBCount, 0) +
        iif(defenderPlans.CosmosDbs != "OFF", cosmosCount, 0) +
        iif(defenderPlans.StorageAccounts != "OFF", storageCount, 0) +
        iif(defenderPlans.Containers != "OFF", aksCount + acrCount, 0) +
        iif(defenderPlans.KeyVaults != "OFF", keyVaultCount, 0) +
        iif(defenderPlans.Arm != "OFF", armCount, 0),
    assetsUNdefended = 
        iif(defenderPlans.CloudPosture == "OFF", cloudPostureBillableCount, 0) +
        iif(defenderPlans.VirtualMachines == "OFF", vmCount, 0) +
        iif(defenderPlans.AppServices == "OFF", appServiceCount, 0) +
        iif(defenderPlans.SqlServers == "OFF", sqlServerCount, 0) +
        iif(defenderPlans.SqlServerVirtualMachines == "OFF", sqlVMCount, 0) +
        iif(defenderPlans.OpenSourceRelationalDatabases == "OFF", openSourceDBCount, 0) +
        iif(defenderPlans.CosmosDbs == "OFF", cosmosCount, 0) +
        iif(defenderPlans.StorageAccounts == "OFF", storageCount, 0) +
        iif(defenderPlans.Containers == "OFF", aksCount + acrCount, 0) +
        iif(defenderPlans.KeyVaults == "OFF", keyVaultCount, 0) +
        iif(defenderPlans.Arm == "OFF", armCount, 0)
| project subscriptionName, //subscriptionId,
    assetsDefended,
    assetsUNdefended,
    CSPM = defenderPlans.CloudPosture,
    CSPMCount = cloudPostureBillableCount,
    Servers = defenderPlans.VirtualMachines,
    ServersCount = vmCount,
    AppService = defenderPlans.AppServices,
    AppServiceCount = appServiceCount,
    AzureSQL = defenderPlans.SqlServers,
    AzureSQLCount = sqlServerCount,
    SQLVM = defenderPlans.SqlServerVirtualMachines,
    SQLVMCount = sqlVMCount,
    OSSdb = defenderPlans.OpenSourceRelationalDatabases,
    OSSdbCount = openSourceDBCount,
    CosmosDB = defenderPlans.CosmosDbs,
    CosmosDatabaseCount = cosmosCount,
    Storage = defenderPlans.StorageAccounts,
    StorageCount = storageCount,
    Containers = defenderPlans.Containers,
    AKSCount = aksCount,
    ACRCount = acrCount,
    KeyVault = defenderPlans.KeyVaults,
    KeyVaultCount = keyVaultCount,
    ARM = defenderPlans.Arm,
    depr_DNS = defenderPlans.Dns,
    depr_KubernetesService = defenderPlans.KubernetesService,
    depr_ContainerRegistry = defenderPlans.ContainerRegistry
